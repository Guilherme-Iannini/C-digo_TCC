#include <WiFi.h>
#include <IOXhop_FirebaseESP32.h>

#define FIREBASE_HOST "https://tcc-guilherme-iannini-cd725-default-rtdb.firebaseio.com"
#define FIREBASE_AUTH "h2dXQeBAH6jwjxRZFrLlLJXBS3m136GXiq7DbJGM"

const char* ssid = "Dutras";
const char* password = "dutras@369";

#define ANALOG_PIN_0 35
#define PINO_RELE 27

// Configurações básicas
const float tensaoAC = 127.0;
const float sensibilidadeSensor = 0.1;
const float kilowattHora = 0.8;

// Variáveis de estado
float correnteRms = 0;
float potencia = 0;
unsigned long tempoLigado = 0;
float valorTotal = 0;
String statusRele = "Desligado";

// Temporizadores
unsigned long ultimaVerificacaoStatus = 0;
const unsigned long intervaloVerificacao = 3000; // 3 segundos
unsigned long ultimoCicloCompleto = 0;
const unsigned long duracaoCiclo = 20000; // 20 segundos

void setup() {
  Serial.begin(115200);
  
  // Conexão WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) delay(500);
  Serial.println("WiFi conectado");
  
  // Inicializa Firebase e relé
  Firebase.begin(FIREBASE_HOST, FIREBASE_AUTH);
  pinMode(PINO_RELE, OUTPUT);
  digitalWrite(PINO_RELE, HIGH); // Inicia desligado
  
  // Carrega tempo inicial
  tempoLigado = Firebase.getInt("/Tomada1/Tempo_de_Uso/Segundos");
  if (tempoLigado < 0) tempoLigado = 0;
}

float calcularCorrente() {
  float soma = 0;
  for (int i = 0; i < 100; i++) {
    soma += sq(analogRead(ANALOG_PIN_0) - 1414);
    delay(1);
  }
  float corrente = sqrt(soma / 100) * (2.5 / 4096) / sensibilidadeSensor;
  return (corrente > 0.5) ? (1.6756 * corrente * corrente) - (1.2907 * corrente) + 0.6432 : corrente;
}

void loop() {
  unsigned long agora = millis();

  // Verificação do status a cada 3 segundos
  if (agora - ultimaVerificacaoStatus >= intervaloVerificacao) {
    ultimaVerificacaoStatus = agora;
    
    String novoStatus = Firebase.getString("/Tomada1/Status");
    novoStatus.replace("\\", "");
    novoStatus.replace("\"", "");
    
    if (novoStatus == "Ligado" || novoStatus == "Desligado") {
      statusRele = novoStatus;
      digitalWrite(PINO_RELE, (statusRele == "Ligado") ? LOW : HIGH);
      
      // Debug: mostra status lido
     
    }
  }

  // Ciclo completo a cada 20 segundos
  if (agora - ultimoCicloCompleto >= duracaoCiclo) {
    ultimoCicloCompleto = agora;
    
    // Medições
    correnteRms = calcularCorrente();
    potencia = correnteRms * tensaoAC;
    
    // Atualiza tempo ligado
    if (statusRele == "Ligado") {
      tempoLigado += 20; // Incrementa 20 segundos
    }
    
    // Cálculos de consumo
    valorTotal += (potencia / 1000.0) * (20.0/3600.0) * kilowattHora;
    
    // Envia dados para Firebase (método alternativo sem updateNode)
    Firebase.setFloat("/Tomada1/Leitura/Corrente", correnteRms);
    Firebase.setFloat("/Tomada1/Leitura/Potencia", potencia);
    Firebase.setFloat("/Tomada1/Valor/Total_Contabilizado", valorTotal);
    Firebase.setInt("/Tomada1/Tempo_de_Uso/Segundos", tempoLigado % 60);
    Firebase.setInt("/Tomada1/Tempo_de_Uso/Minutos", (tempoLigado % 3600) / 60);
    Firebase.setInt("/Tomada1/Tempo_de_Uso/Horas", (tempoLigado % 86400) / 3600);
    Firebase.setInt("/Tomada1/Tempo_de_Uso/Dias", tempoLigado / 86400);
    
  
  }
}
